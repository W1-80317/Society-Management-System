{"ast":null,"code":"// Assuming this code is in your backend server file, like server.js or app.js\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst crypto = require('crypto');\nconst db = require('./your-database-module'); // Import your database module\n\nconst app = express();\n\n// Middleware\napp.use(bodyParser.json());\n\n// Register Owner endpoint\napp.post(\"/registerOwner\", (req, res) => {\n  const {\n    secretaryId,\n    flat_no,\n    name,\n    address,\n    mobile_no,\n    email,\n    password\n  } = req.body;\n  if (!secretaryId || !flat_no || !name || !address || !mobile_no || !email || !password) {\n    return res.status(400).json({\n      error: \"One or more required fields are missing\"\n    });\n  }\n  const encryptedPassword = crypto.createHash('sha256').update(password).digest('hex');\n  const insertQuery = `\n        INSERT INTO owner (secretary_id, flat_no, name, address, mobile_no, email, password)\n        VALUES (?,?,?,?,?,?,?)\n    `;\n  db.execute(insertQuery, [secretaryId, flat_no, name, address, mobile_no, email, encryptedPassword], (error, results) => {\n    if (error) {\n      console.error(\"Database query error:\", error);\n      if (error.code === 'ER_DUP_ENTRY') {\n        return res.status(400).json({\n          error: \"Duplicate entry. This flat number is already registered.\"\n        });\n      }\n      return res.status(500).json({\n        error: \"Internal Server Error\"\n      });\n    }\n    res.json({\n      message: \"Owner registered successfully\"\n    });\n  });\n});\n\n// Start the server\nconst PORT = process.env.PORT || 9898;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","bodyParser","crypto","db","app","use","json","post","req","res","secretaryId","flat_no","name","address","mobile_no","email","password","body","status","error","encryptedPassword","createHash","update","digest","insertQuery","execute","results","console","code","message","PORT","process","env","listen","log"],"sources":["/home/vedant/SYSTUM/project 2/admin (2)/src/pages/forms/registerOwner.jsx"],"sourcesContent":["// Assuming this code is in your backend server file, like server.js or app.js\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst crypto = require('crypto');\nconst db = require('./your-database-module'); // Import your database module\n\nconst app = express();\n\n// Middleware\napp.use(bodyParser.json());\n\n// Register Owner endpoint\napp.post(\"/registerOwner\", (req, res) => {\n    const { secretaryId, flat_no, name, address, mobile_no, email, password } = req.body;\n\n    if (!secretaryId || !flat_no || !name || !address || !mobile_no || !email || !password) {\n        return res.status(400).json({ error: \"One or more required fields are missing\" });\n    }\n\n    const encryptedPassword = crypto.createHash('sha256').update(password).digest('hex');\n\n    const insertQuery = `\n        INSERT INTO owner (secretary_id, flat_no, name, address, mobile_no, email, password)\n        VALUES (?,?,?,?,?,?,?)\n    `;\n\n    db.execute(insertQuery, [secretaryId, flat_no, name, address, mobile_no, email, encryptedPassword], (error, results) => {\n        if (error) {\n            console.error(\"Database query error:\", error);\n            if (error.code === 'ER_DUP_ENTRY') {\n                return res.status(400).json({ error: \"Duplicate entry. This flat number is already registered.\" });\n            }\n            return res.status(500).json({ error: \"Internal Server Error\" });\n        }\n\n        res.json({ message: \"Owner registered successfully\" });\n    });\n});\n\n// Start the server\nconst PORT = process.env.PORT || 9898;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMG,EAAE,GAAGH,OAAO,CAAC,wBAAwB,CAAC,CAAC,CAAC;;AAE9C,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;;AAErB;AACAK,GAAG,CAACC,GAAG,CAACJ,UAAU,CAACK,IAAI,CAAC,CAAC,CAAC;;AAE1B;AACAF,GAAG,CAACG,IAAI,CAAC,gBAAgB,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACrC,MAAM;IAAEC,WAAW;IAAEC,OAAO;IAAEC,IAAI;IAAEC,OAAO;IAAEC,SAAS;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGR,GAAG,CAACS,IAAI;EAEpF,IAAI,CAACP,WAAW,IAAI,CAACC,OAAO,IAAI,CAACC,IAAI,IAAI,CAACC,OAAO,IAAI,CAACC,SAAS,IAAI,CAACC,KAAK,IAAI,CAACC,QAAQ,EAAE;IACpF,OAAOP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACZ,IAAI,CAAC;MAAEa,KAAK,EAAE;IAA0C,CAAC,CAAC;EACrF;EAEA,MAAMC,iBAAiB,GAAGlB,MAAM,CAACmB,UAAU,CAAC,QAAQ,CAAC,CAACC,MAAM,CAACN,QAAQ,CAAC,CAACO,MAAM,CAAC,KAAK,CAAC;EAEpF,MAAMC,WAAW,GAAI;AACzB;AACA;AACA,KAAK;EAEDrB,EAAE,CAACsB,OAAO,CAACD,WAAW,EAAE,CAACd,WAAW,EAAEC,OAAO,EAAEC,IAAI,EAAEC,OAAO,EAAEC,SAAS,EAAEC,KAAK,EAAEK,iBAAiB,CAAC,EAAE,CAACD,KAAK,EAAEO,OAAO,KAAK;IACpH,IAAIP,KAAK,EAAE;MACPQ,OAAO,CAACR,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,IAAIA,KAAK,CAACS,IAAI,KAAK,cAAc,EAAE;QAC/B,OAAOnB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACZ,IAAI,CAAC;UAAEa,KAAK,EAAE;QAA2D,CAAC,CAAC;MACtG;MACA,OAAOV,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACZ,IAAI,CAAC;QAAEa,KAAK,EAAE;MAAwB,CAAC,CAAC;IACnE;IAEAV,GAAG,CAACH,IAAI,CAAC;MAAEuB,OAAO,EAAE;IAAgC,CAAC,CAAC;EAC1D,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACA,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AACrC1B,GAAG,CAAC6B,MAAM,CAACH,IAAI,EAAE,MAAM;EACnBH,OAAO,CAACO,GAAG,CAAE,6BAA4BJ,IAAK,EAAC,CAAC;AACpD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}